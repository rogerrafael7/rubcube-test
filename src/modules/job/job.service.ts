import { Injectable } from '@nestjs/common';
import { Log } from '../database/log.schema';
import { LogRepo } from '../database/log.repo';

@Injectable()
export class JobService {
  constructor(readonly logModel: LogRepo) {}
  async processFile(file: Express.Multer.File, removeAll = true) {
    if (removeAll) {
      await this.logModel.model.deleteMany({});
    }
    await this.parseLogFile(file.buffer.toString());
  }
  private async parseLogFile(contentTxt: string) {
    const initialAllLinesRegex = /[\d:]{4}\s+([\w\s]+):(.+)/;
    const initialGameRegex = /InitGame:\s+(.*)$/;
    const killRegex = /Kill:\s+[^:]+:\s+(.+)\s+killed\s+(.+)\s+by\s+(MOD_.+)/;

    let countChangeGameConfig = 0;

    const lines = contentTxt.split('\n');
    for (const [index, l] of Object.entries(lines)) {
      const line = l.trim();
      const match = line.match(initialAllLinesRegex);
      if (!match) continue;
      const row = new Log();
      row.logLineNum = Number(index) + 1;
      row.eventType = match[1];
      row.eventValue = match[2];

      const initialGameMatch = line.match(initialGameRegex);
      const killMatch = line.match(killRegex);
      if (initialGameMatch) {
        countChangeGameConfig += 1;
      } else if (killMatch) {
        row.killerName = killMatch[1];
        row.killedName = killMatch[2];
        row.killModType = killMatch[3];
      }

      await new this.logModel.model({
        ...row,
        gameNameAutoGenerated: `Game_${countChangeGameConfig}`,
      }).save();
    }
  }
}

import { Injectable } from '@nestjs/common';
import { LogRepo } from '../database/log.repo';

@Injectable()
export class StatisticsService {
  constructor(readonly logModel: LogRepo) {}

  async getStatisticsByGames(games: string[] = []): Promise<any> {
    const filterByGameName = games.length > 0;
    return this.logModel.model.aggregate([
      {
        $match: {
          eventType: 'Kill',
          ...(filterByGameName && {
            gameNameAutoGenerated: { $in: games },
          }),
        },
      },
      {
        $group: {
          _id: {
            gameNameAutoGenerated: '$gameNameAutoGenerated',
            killModType: '$killModType',
          },
          countKills: { $sum: 1 },
          countKillsByWorld: {
            $sum: {
              $cond: {
                if: { $eq: ['$killerName', '<world>'] },
                then: 1,
                else: 0,
              },
            },
          },
        },
      },
      {
        $group: {
          _id: '$_id.gameNameAutoGenerated',
          countKills: { $sum: '$countKills' },
          countKillsByWorld: { $sum: '$countKillsByWorld' },
          countKillsByType: {
            $push: {
              type: '$_id.killModType',
              count: '$countKills',
            },
          },
        },
      },
      {
        $sort: { _id: 1 },
      },
    ]);
  }

  async getRankingPlayersByGames(games: string[] = []): Promise<any> {
    const filterByGameName = games.length > 0;
    return this.logModel.model.aggregate([
      {
        $match: {
          eventType: 'Kill',
          ...(filterByGameName && {
            gameNameAutoGenerated: { $in: games },
          }),
        },
      },
      {
        $group: {
          _id: {
            gameNameAutoGenerated: '$gameNameAutoGenerated',
            killerName: '$killerName',
          },
          countKills: { $sum: 1 },
          countDeathsByWorld: {
            $sum: {
              $cond: {
                if: { $eq: ['$killerName', '<world>'] },
                then: 1,
                else: 0,
              },
            },
          },
        },
      },
      {
        $group: {
          _id: '$_id.gameNameAutoGenerated',
          rankingPlayers: {
            $push: {
              name: '$_id.killerName',
              kills: '$countKills',
              deathsByWorld: '$countDeathsByWorld',
            },
          },
        },
      },
      {
        $project: {
          _id: 1,
          rankingPlayers: {
            $filter: {
              input: '$rankingPlayers',
              as: 'player',
              cond: { $ne: ['$$player.name', '<world>'] },
            },
          },
        },
      },
      {
        $sort: { _id: 1 },
      },
    ]);
  }
}

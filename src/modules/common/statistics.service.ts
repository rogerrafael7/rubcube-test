import { Injectable } from '@nestjs/common';
import { LogRepo } from '../database/log.repo';

@Injectable()
export class StatisticsService {
  constructor(readonly logModel: LogRepo) {}

  async getStatisticsByGames(games: string[] = []): Promise<any> {
    const filterByGameName = games.length > 0;
    return this.logModel.model.aggregate([
      {
        $match: {
          eventType: 'Kill',
          ...(filterByGameName && {
            gameNameAutoGenerated: { $in: games },
          }),
        },
      },
      {
        $group: {
          _id: {
            gameNameAutoGenerated: '$gameNameAutoGenerated',
            killModType: '$killModType',
          },
          countKills: { $sum: 1 },
          countKillsByWorld: {
            $sum: {
              $cond: {
                if: { $eq: ['$killerName', '<world>'] },
                then: 1,
                else: 0,
              },
            },
          },
        },
      },
      {
        $group: {
          _id: '$_id.gameNameAutoGenerated',
          countKills: { $sum: '$countKills' },
          countKillsByWorld: { $sum: '$countKillsByWorld' },
          countKillsByType: {
            $push: {
              type: '$_id.killModType',
              count: '$countKills',
            },
          },
        },
      },
      {
        $sort: { _id: 1 },
      },
    ]);
  }

  async getRankingPlayersByGames(games: string[] = []): Promise<any> {
    const filterByGameName = games.length > 0;
    const result = await this.logModel.model.aggregate([
      {
        $match: {
          eventType: 'Kill',
          ...(filterByGameName && { gameNameAutoGenerated: { $in: games } }),
        },
      },
      {
        $group: {
          _id: {
            gameNameAutoGenerated: '$gameNameAutoGenerated',
            killerName: '$killerName',
            killedName: '$killedName',
          },
          countKills: { $sum: 1 },
        },
      },
      {
        $group: {
          _id: '$_id.gameNameAutoGenerated',
          rankingPlayers: {
            $push: {
              killerName: '$_id.killerName',
              killedName: '$_id.killedName',
              kills: '$countKills',
            },
          },
        },
      },
      {
        $sort: { _id: 1 },
      },
    ]);

    const resultToReturn = [];
    const dictPlayers = {};
    for (const { _id, rankingPlayers } of result) {
      for (const rankingPlayer of rankingPlayers) {
        if (
          rankingPlayer.killerName !== '<world>' &&
          !dictPlayers[rankingPlayer.killerName]
        ) {
          dictPlayers[rankingPlayer.killerName] = {
            player: rankingPlayer.killerName,
            kills: 0,
            deathsByWorld: 0,
          };
        }
        if (
          rankingPlayer.killedName !== '<world>' &&
          !dictPlayers[rankingPlayer.killedName]
        ) {
          dictPlayers[rankingPlayer.killedName] = {
            player: rankingPlayer.killedName,
            kills: 0,
            deathsByWorld: 0,
          };
        }
        if (
          dictPlayers[rankingPlayer.killerName] &&
          rankingPlayer.killedName !== rankingPlayer.killerName
        ) {
          dictPlayers[rankingPlayer.killerName].kills += rankingPlayer.kills;
        }
        if (
          rankingPlayer.killerName === '<world>' &&
          dictPlayers[rankingPlayer.killedName]
        ) {
          dictPlayers[rankingPlayer.killedName].deathsByWorld +=
            rankingPlayer.kills;
        }
      }
      resultToReturn.push({
        _id,
        rankingPlayers: Object.values(dictPlayers)
          .map((v: any) => ({
            ...v,
            points: v.kills - v.deathsByWorld,
          }))
          .sort((a: any, b: any) => b.points - a.points),
      });
    }

    return resultToReturn;
  }
}
